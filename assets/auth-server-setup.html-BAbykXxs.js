import{_ as n,c as a,a as s,o as i}from"./app-PWdtMHCu.js";const l={};function r(t,e){return i(),a("div",null,e[0]||(e[0]=[s(`<h1 id="auth-server-setup" tabindex="-1"><a class="header-anchor" href="#auth-server-setup"><span>Auth Server Setup</span></a></h1><p>This guide will walk you through setting up Melody Auth in both Cloudflare (remote/production or local/development) and Node.js environments.</p><p>If you&#39;re on Windows, please use either WSL or Docker to set up your environment.</p><h2 id="cloudflare-remote-production-environment" tabindex="-1"><a class="header-anchor" href="#cloudflare-remote-production-environment"><span>Cloudflare Remote/Production Environment</span></a></h2><h3 id="_1-cloudflare-account-setup" tabindex="-1"><a class="header-anchor" href="#_1-cloudflare-account-setup"><span>1. Cloudflare Account Setup</span></a></h3><ol><li>Sign up for a Cloudflare account if you don&#39;t have one already.</li></ol><h3 id="_2-cloudflare-resource-creation" tabindex="-1"><a class="header-anchor" href="#_2-cloudflare-resource-creation"><span>2. Cloudflare Resource Creation</span></a></h3><p>In your Cloudflare dashboard:</p><ol><li>Create a Worker: <ul><li>Go to &quot;Compute(Workers)&quot; -&gt; &quot;Workers &amp; Pages&quot; -&gt; Click &quot;Create&quot; button</li><li>Name the worker &quot;melody-auth&quot;</li><li>After creation, open the worker -&gt; &quot;Settings&quot; -&gt; &quot;Variables and Secrets&quot;</li><li>Add a variable named &quot;AUTH_SERVER_URL&quot; with the value set to your worker&#39;s URL (e.g., https://melody-auth.[your-account-name].workers.dev)</li></ul></li><li>Create a D1 Database: <ul><li>Go to &quot;Storage &amp; Databases&quot; -&gt; &quot;D1 SQL Database&quot;</li><li>Click &quot;Create&quot; button</li></ul></li><li>Create a KV Storage: <ul><li>Go to &quot;Storage &amp; Databases&quot; -&gt; &quot;KV&quot;</li><li>Click &quot;Create&quot; button</li></ul></li></ol><h3 id="_3-cloudflare-worker-secrets-setup" tabindex="-1"><a class="header-anchor" href="#_3-cloudflare-worker-secrets-setup"><span>3. Cloudflare Worker Secrets Setup</span></a></h3><p>In your Cloudflare dashboard:</p><ol><li>Go to &quot;Compute(Workers)&quot; -&gt; &quot;Workers &amp; Pages&quot;</li><li>Select your &quot;melody-auth&quot; worker</li><li>Click on &quot;Settings&quot; -&gt; &quot;Variables and Secrets&quot;</li><li>Include the required environment variables for any email, SMS, or social sign-in providers you plan to use. <ul><li><a href="https://auth.valuemelody.com/email-provider-setup.html" target="_blank" rel="noopener noreferrer">Email Provider Setup</a></li><li><a href="https://auth.valuemelody.com/sms-provider-setup.html" target="_blank" rel="noopener noreferrer">SMS Provider Setup</a></li><li><a href="https://auth.valuemelody.com/social-sign-in-provider-setup.html" target="_blank" rel="noopener noreferrer">Social Sign-In Provider Setup</a></li></ul></li><li>Define an environment variable “ENVIRONMENT” and ensure it is set to a value other than “dev”.</li></ol><h3 id="_4-project-setup" tabindex="-1"><a class="header-anchor" href="#_4-project-setup"><span>4. Project Setup</span></a></h3><ol><li><p>Clone the Repository and login to Cloudflare:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">git clone git@github.com:ValueMelody/melody-auth.git</span>
<span class="line">cd melody-auth/server</span>
<span class="line">npm install</span>
<span class="line">npx wrangler login</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Configure <code>server/wrangler.toml</code>: Replace the KV and D1 IDs with the resources you created:</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">kv_namespaces</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">binding</span> <span class="token punctuation">=</span> <span class="token string">&quot;KV&quot;</span></span>
<span class="line"><span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">&quot;your_kv_namespace_id&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">d1_databases</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">binding</span> <span class="token punctuation">=</span> <span class="token string">&quot;DB&quot;</span></span>
<span class="line"><span class="token key property">database_name</span> <span class="token punctuation">=</span> <span class="token string">&quot;melody-auth&quot;</span></span>
<span class="line"><span class="token key property">database_id</span> <span class="token punctuation">=</span> <span class="token string">&quot;your_d1_database_id&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_5-initial-deployment" tabindex="-1"><a class="header-anchor" href="#_5-initial-deployment"><span>5. Initial Deployment</span></a></h3><p>Run the following commands</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">cd server</span>
<span class="line">npm run prod:secret:generate</span>
<span class="line">npm run prod:migration:apply</span>
<span class="line">npm run prod:deploy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Now you are all set</strong>, you can verify your deployment by accessing: <code>[your_worker_url]/.well-known/openid-configuration</code></p><h3 id="_6-future-deployments" tabindex="-1"><a class="header-anchor" href="#_6-future-deployments"><span>6.Future Deployments</span></a></h3><p>To pull the latest code and redeploy:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">git pull origin main</span>
<span class="line">cd server</span>
<span class="line">npm run prod:migration:apply # If there are new migrations</span>
<span class="line">npm run prod:deploy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cloudflare-local-development-environment" tabindex="-1"><a class="header-anchor" href="#cloudflare-local-development-environment"><span>Cloudflare Local/Development Environment</span></a></h2><p>To set up your local development environment, follow these steps:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">git clone git@github.com:ValueMelody/melody-auth.git</span>
<span class="line">cd melody-auth/server</span>
<span class="line">npm install</span>
<span class="line"></span>
<span class="line">cp .dev.vars.example .dev.vars</span>
<span class="line"># Include the required environment variables for any email, SMS, or social sign-in providers you plan to use.</span>
<span class="line"># Make sure the environment variable &quot;ENVIRONMENT&quot; is set to &quot;dev&quot; for your local environment.</span>
<span class="line"></span>
<span class="line">npm run dev:secret:generate</span>
<span class="line">npm run dev:migration:apply</span>
<span class="line">npm run dev:start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cloudflare-multiple-remote-environments" tabindex="-1"><a class="header-anchor" href="#cloudflare-multiple-remote-environments"><span>Cloudflare Multiple Remote Environments</span></a></h2><p>When managing several remote environments (e.g., dev, demo, QA, staging, production) on Cloudflare, you can follow these steps:</p><ol><li>Provision Resources:<br> Create the Worker, D1, and KV resources for your new environment via the Cloudflare dashboard.</li><li>Duplicate the Configuration File:<br> Copy an existing toml file (such as server/wrangler.toml or server/demo.wrangler.toml) and rename it to something like [envName].wrangler.toml.</li><li>Update Resource Identifiers:<br> Edit your new [envName].wrangler.toml file to replace the resource names, KV ID, and D1 ID with those corresponding to your newly created resources.</li><li>Generate Secrets:<br> Run the secret generation script using your new configuration file:<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">node ./src/scripts/generate-secret.cjs prod [envName].wrangler.toml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>Apply D1 Migrations:<br> Execute the D1 migration command for your new environment&#39;s D1 resource:<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">wrangler d1 migrations apply [d1 name for your new environment] --remote --config [envName].wrangler.toml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>Deploy the Worker:<br> Build and deploy your Worker with the new environment&#39;s name:<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">npm run build &amp;&amp; wrangler deploy --minify src/index.tsx --config [envName].wrangler.toml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="node-environment-setup" tabindex="-1"><a class="header-anchor" href="#node-environment-setup"><span>Node Environment Setup</span></a></h2><h3 id="_1-node-postgres-and-redis-setup" tabindex="-1"><a class="header-anchor" href="#_1-node-postgres-and-redis-setup"><span>1. Node, Postgres and Redis setup</span></a></h3><p>Begin by setting up your PostgreSQL and Redis servers, and ensure you have the connection strings ready for integration. Please also ensure you are using <b>Node.js version 20.05 or higher</b> for compatibility.</p><h3 id="_2-project-setup" tabindex="-1"><a class="header-anchor" href="#_2-project-setup"><span>2. Project setup</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">git clone git@github.com:ValueMelody/melody-auth.git</span>
<span class="line">cd melody-auth/server</span>
<span class="line">npm install</span>
<span class="line"></span>
<span class="line">cp .dev.vars.example .dev.vars</span>
<span class="line"># Fill in PostgreSQL &amp; Redis connection strings</span>
<span class="line"># Include the required environment variables for any email, SMS, or social sign-in providers you plan to use.</span>
<span class="line"># Make sure the environment variable &quot;ENVIRONMENT&quot; is set to &quot;dev&quot; for your local environment.</span>
<span class="line"></span>
<span class="line">npm run node:secret:generate</span>
<span class="line">npm run node:saml:secret:generate</span>
<span class="line">npm run node:migration:apply</span>
<span class="line">npm run node:dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This starts the server in development mode using Node.js, connected to your local or remote databases.</p><h3 id="_3-production-build" tabindex="-1"><a class="header-anchor" href="#_3-production-build"><span>3. Production Build</span></a></h3><p>To build and run in production:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line"># Make sure the environment variable &quot;ENVIRONMENT&quot; is set to a value other than &quot;dev&quot; for your production build.</span>
<span class="line">cd server</span>
<span class="line">npm run node:build</span>
<span class="line">npm run node:start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-future-deployments" tabindex="-1"><a class="header-anchor" href="#_4-future-deployments"><span>4.Future Deployments</span></a></h3><p>To pull the latest code and redeploy:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">git pull origin main</span>
<span class="line">cd server</span>
<span class="line">npm run node:migration:apply # If there are new migrations</span>
<span class="line">npm run node:build</span>
<span class="line">npm run node:start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node-dev-environment-with-docker" tabindex="-1"><a class="header-anchor" href="#node-dev-environment-with-docker"><span>Node Dev Environment with Docker</span></a></h2><ul><li>Set required env vars in server/.dev.vars</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">cd server</span>
<span class="line"></span>
<span class="line">cp .dev.vars.example .dev.vars</span>
<span class="line"># Enable PostgreSQL &amp; Redis connection strings for docker</span>
<span class="line">PG_CONNECTION_STRING=postgres://admin:admin@postgres:5432/melody-auth</span>
<span class="line">REDIS_CONNECTION_STRING=redis://redis:6379</span>
<span class="line"></span>
<span class="line"># Include the required environment variables for any email, SMS, or social sign-in providers you plan to use.</span>
<span class="line"># Make sure the environment variable &quot;ENVIRONMENT&quot; is set to &quot;dev&quot; for your local environment.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Run docker compose</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">cd devops/docker</span>
<span class="line">docker-compose up --build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,44)]))}const d=n(l,[["render",r]]),p=JSON.parse('{"path":"/auth-server-setup.html","title":"Auth Server Setup","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754702584000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":11,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"e8160a845120c944f26f39fd6b2828da9bb2ee19","time":1754702584000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add doc for app banner feature (#417)","tag":"v1.3.5"},{"hash":"ed35295e8eba4ff0642166cf025380b9a9631a87","time":1752450868000,"email":"byn9826@gmail.com","author":"Baozier","message":"Move docker to devops folder (#405)","tag":"v1.3.4"},{"hash":"1f6a42a6b45fdfb25e862e4b91e0a9988ee80459","time":1748744819000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add docs in CN (#378)"},{"hash":"b1589f2304a8eefb9b49b614de31c758d9623301","time":1747685325000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add embedded auth api doc (#365)","tag":"v1.3.0"},{"hash":"a9b657a40128a37abfb1226ee0b33f90fd7224ad","time":1744850359000,"email":"byn9826@gmail.com","author":"Baozier","message":"Make server use its independent package-lock.json (#316)"},{"hash":"fb27608e84b3be525d100f2929424ea50c257925","time":1744681804000,"email":"byn9826@gmail.com","author":"Baozier","message":"Group sdks into a single folder (#309)"},{"hash":"8b0d39d8c29189cbf321939e2b511ff1074ea53f","time":1744482862000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add docker support for node dev env (#302)"},{"hash":"108468e5c198d34a92e1004c81eb93f09c37bdb2","time":1743391881000,"email":"byn9826@gmail.com","author":"Baozier","message":"Fix passkey enrollment on mac (#285)"},{"hash":"93e65f81b84c49c796b8785631728fe9426e1ffe","time":1742257849000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add doc for how to manage multiple Cloudflare remote envs (#268)"},{"hash":"6964194be37bcda1dcda6673c9b0a1520ccba610","time":1741149223000,"email":"byn9826@gmail.com","author":"Baozier","message":"Major refactor of identity service &#x26; tests, make jsx/dom as identity view renderer (#254)","tag":"v1.2.0"},{"hash":"dab232c28ad153e90129d65b72ad543d428b9685","time":1739055609000,"email":"byn9826@gmail.com","author":"Baozier","message":"Update docs structure (#223)","tag":"v1.1.6"}]},"filePathRelative":"auth-server-setup.md"}');export{d as comp,p as data};
