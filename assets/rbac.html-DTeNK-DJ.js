import{_ as a,c as s,a as n,o}from"./app-DYNaD-s_.js";const i={};function r(l,e){return o(),s("div",null,e[0]||(e[0]=[n(`<h1 id="role-based-access-control-rbac" tabindex="-1"><a class="header-anchor" href="#role-based-access-control-rbac"><span>Role-Based Access Control (RBAC)</span></a></h1><p>Melody Auth provides a built-in Role-Based Access Control (RBAC) system that allows you to manage user permissions through roles. Users can be assigned multiple roles.</p><h2 id="how-rbac-works" tabindex="-1"><a class="header-anchor" href="#how-rbac-works"><span>How RBAC Works</span></a></h2><p>The RBAC system contains three major components:</p><ol><li><strong>Roles</strong> - Named collections of permissions (e.g., <code>super_admin</code>, <code>support_admin</code>, <code>user</code>)</li><li><strong>Users</strong> - Individual accounts that can be assigned one or more roles.</li><li><strong>Permissions</strong> - Specific access rights that are checked throughout the system</li></ol><h2 id="built-in-roles" tabindex="-1"><a class="header-anchor" href="#built-in-roles"><span>Built-in Roles</span></a></h2><p>Melody Auth comes with the following predefined role:</p><ul><li><strong><code>super_admin</code></strong> - Has full administrative access to all system features</li></ul><p>You can create additional custom roles through the Admin Panel or REST API.</p><h2 id="role-management" tabindex="-1"><a class="header-anchor" href="#role-management"><span>Role Management</span></a></h2><h3 id="via-admin-panel" tabindex="-1"><a class="header-anchor" href="#via-admin-panel"><span>Via Admin Panel</span></a></h3><ol><li>Navigate to the Roles section in the Admin Panel</li><li>Click &quot;Create Role&quot;</li><li>Provide a role name and optional description</li><li>Save the role</li></ol><h3 id="via-s2s-rest-api" tabindex="-1"><a class="header-anchor" href="#via-s2s-rest-api"><span>Via S2S REST API</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">GET /api/v1/roles: Get all roles</span>
<span class="line">POST /api/v1/roles: Create a new role</span>
<span class="line">GET /api/v1/roles/{roleId}: Get a role</span>
<span class="line">PUT /api/v1/roles/{roleId}: Update a role</span>
<span class="line">DELETE /api/v1/roles/{roleId}: Delete a role</span>
<span class="line">GET /api/v1/roles/{roleId}/users: Get all users in a role</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="role-information-in-tokens" tabindex="-1"><a class="header-anchor" href="#role-information-in-tokens"><span>Role Information in Tokens</span></a></h3><p>When a user authenticates, their assigned roles are included in both:</p><ol><li><strong>Access Tokens</strong> - Used for API authorization</li><li><strong>ID Tokens</strong> - Used for user identity information</li></ol><p>then you can use the <code>roles</code> field in the access token and id token to check the user&#39;s permissions.</p>`,18)]))}const c=a(i,[["render",r]]),d=JSON.parse('{"path":"/rbac.html","title":"Role-Based Access Control (RBAC)","lang":"en-US","frontmatter":{},"git":{"updatedTime":1755304846000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":1,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"5396c9586a61f59593ebaea2b6848496a7027f19","time":1755304846000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add docs for main features (#428)"}]},"filePathRelative":"rbac.md"}');export{c as comp,d as data};
