import{_ as s,c as r,a as l,b as e,d as o,e as n,w as a,r as c,o as d}from"./app-C2vUhxwJ.js";const h={};function u(p,t){const i=c("RouteLink");return d(),r("div",null,[t[10]||(t[10]=l('<h1 id="authentication" tabindex="-1"><a class="header-anchor" href="#authentication"><span>Authentication</span></a></h1><p>Melody Auth provides multiple authentication methods to suit different integration needs:</p><ul><li><strong>PKCE Flow</strong> (Proof Key for Code Exchange) - The <strong>default and recommended</strong> OAuth 2.0 authorization code flow for frontend applications</li><li><strong>Embedded Authentication Flow</strong> - Direct API integration for custom authentication experiences</li></ul><h2 id="what-is-pkce" tabindex="-1"><a class="header-anchor" href="#what-is-pkce"><span>What is PKCE?</span></a></h2><p><strong>PKCE</strong> (Proof Key for Code Exchange) is a security extension to the OAuth 2.0 Authorization Code Flow designed to enhance security for public clients, such as single-page applications (SPAs) and mobile apps, that cannot securely store client secrets.</p><p>PKCE introduces a dynamically generated, one-time-use secret called a <strong>code verifier</strong> that is used to secure the authorization code exchange process. This eliminates the need for client secrets in public clients while maintaining security.</p><h2 id="security-benefits" tabindex="-1"><a class="header-anchor" href="#security-benefits"><span>Security Benefits</span></a></h2><ul><li><strong>Prevents Authorization Code Interception</strong>: Even if an attacker intercepts the authorization code, they cannot exchange it for tokens without the original code verifier</li><li><strong>Eliminates Client Secret Requirements</strong>: Public clients can securely authenticate without storing sensitive secrets</li><li><strong>Mitigates CSRF Attacks</strong>: Binds the authorization request to the specific client that initiated it</li><li><strong>Protects Against Code Injection</strong>: Ensures only the legitimate client can complete the flow</li></ul><h2 id="how-authentication-operations-work-with-pkce" tabindex="-1"><a class="header-anchor" href="#how-authentication-operations-work-with-pkce"><span>How Authentication Operations Work with PKCE</span></a></h2><p>All authentication operations follow the same PKCE flow pattern but differ in the authentication step:</p><h3 id="standard-pkce-flow-process" tabindex="-1"><a class="header-anchor" href="#standard-pkce-flow-process"><span>Standard PKCE Flow Process</span></a></h3><ol><li><strong>Client generates code verifier and challenge</strong></li><li><strong>User is redirected to Melody Auth with code challenge</strong></li><li><strong>User performs authentication operation</strong> (varies by operation type)</li><li><strong>Authorization code is returned to client</strong></li><li><strong>Client exchanges code + verifier for tokens</strong></li></ol><h2 id="authentication-operations-via-pkce" tabindex="-1"><a class="header-anchor" href="#authentication-operations-via-pkce"><span>Authentication Operations via PKCE</span></a></h2><p>All user authentication operations in Melody Auth can be performed through the PKCE flow, including:</p><ul><li><strong>Sign-In</strong> - Standard email/password authentication</li><li><strong>Passwordless Sign-In</strong> - Email-based authentication without passwords</li><li><strong>Sign-Up</strong> - New user registration and account creation</li><li><strong>Sign-Out</strong> - Session termination and token revocation</li><li><strong>Email Verification</strong> - Confirming user email addresses</li><li><strong>Password Reset</strong> - Secure password recovery process</li><li><strong>Multi-Factor Authentication (MFA)</strong> - Email MFA, SMS MFA, OTP MFA, Passkey authentication, and MFA management</li><li><strong>Policy-Based Authentication</strong> - Custom policies, conditional access, and step-up authentication</li></ul><p>Each of these operations leverages the same secure PKCE authorization code flow, ensuring consistent security across all authentication scenarios.</p><h2 id="authentication-methods-comparison" tabindex="-1"><a class="header-anchor" href="#authentication-methods-comparison"><span>Authentication Methods Comparison</span></a></h2><h3 id="pkce-flow-recommended" tabindex="-1"><a class="header-anchor" href="#pkce-flow-recommended"><span>PKCE Flow (Recommended)</span></a></h3><ul><li><strong>Use Case</strong>: Standard OAuth 2.0 flow with enhanced security</li><li><strong>Best For</strong>: SPAs, mobile apps, and web applications</li><li><strong>Security</strong>: Highest security with code challenge/verifier</li><li><strong>Integration</strong>: Simple with provided SDKs</li><li><strong>User Experience</strong>: Redirects to hosted authentication pages</li></ul><h3 id="embedded-authentication-flow" tabindex="-1"><a class="header-anchor" href="#embedded-authentication-flow"><span>Embedded Authentication Flow</span></a></h3><ul><li><strong>Use Case</strong>: Custom authentication UI within your application</li><li><strong>Best For</strong>: Applications requiring full UI control</li><li><strong>Security</strong>: Direct API calls with proper token handling</li><li><strong>Integration</strong>: More complex, requires custom implementation</li><li><strong>User Experience</strong>: Seamless, no redirects required</li></ul><h2 id="sdk-integration" tabindex="-1"><a class="header-anchor" href="#sdk-integration"><span>SDK Integration</span></a></h2><h3 id="pkce-flow-sdks" tabindex="-1"><a class="header-anchor" href="#pkce-flow-sdks"><span>PKCE Flow SDKs</span></a></h3>',23)),e("ul",null,[e("li",null,[o(i,{to:"/react-sdk.html"},{default:a(()=>t[0]||(t[0]=[n("React SDK Documentation",-1)])),_:1,__:[0]}),t[1]||(t[1]=n(" - React hooks and components",-1))]),e("li",null,[o(i,{to:"/vue-sdk.html"},{default:a(()=>t[2]||(t[2]=[n("Vue SDK Documentation",-1)])),_:1,__:[2]}),t[3]||(t[3]=n(" - Vue 3 composables and plugins",-1))]),e("li",null,[o(i,{to:"/angular-sdk.html"},{default:a(()=>t[4]||(t[4]=[n("Angular SDK Documentation",-1)])),_:1,__:[4]}),t[5]||(t[5]=n(" - Angular services and guards",-1))]),e("li",null,[o(i,{to:"/web-sdk.html"},{default:a(()=>t[6]||(t[6]=[n("Web SDK Documentation",-1)])),_:1,__:[6]}),t[7]||(t[7]=n(" - Vanilla JavaScript implementation",-1))])]),t[11]||(t[11]=e("h3",{id:"embedded-authentication",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#embedded-authentication"},[e("span",null,"Embedded Authentication")])],-1)),e("ul",null,[e("li",null,[o(i,{to:"/embedded-auth-api.html"},{default:a(()=>t[8]||(t[8]=[n("Embedded Auth API Documentation",-1)])),_:1,__:[8]}),t[9]||(t[9]=n(" - Direct API integration guide",-1))])])])}const m=s(h,[["render",u]]),f=JSON.parse('{"path":"/authentication.html","title":"Authentication","lang":"en-US","frontmatter":{},"git":{"updatedTime":1755304846000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":1,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"5396c9586a61f59593ebaea2b6848496a7027f19","time":1755304846000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add docs for main features (#428)"}]},"filePathRelative":"authentication.md"}');export{m as comp,f as data};
