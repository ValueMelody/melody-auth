import{_ as a,c as s,a as n,o as i}from"./app-BPesaNQn.js";const l={};function r(o,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="基于角色的访问控制-rbac" tabindex="-1"><a class="header-anchor" href="#基于角色的访问控制-rbac"><span>基于角色的访问控制 (RBAC)</span></a></h1><p>Melody Auth 提供了内置的基于角色的访问控制 (RBAC) 系统，使你可以通过角色管理用户权限。用户可以被分配多个角色。</p><h2 id="rbac-工作原理" tabindex="-1"><a class="header-anchor" href="#rbac-工作原理"><span>RBAC 工作原理</span></a></h2><p>RBAC 系统包含三个主要组件：</p><ol><li><strong>角色 (Roles)</strong> - 权限的命名集合（例如 <code>super_admin</code>、<code>support_admin</code>、<code>user</code>）</li><li><strong>用户 (Users)</strong> - 可以被分配一个或多个角色的个人账户</li><li><strong>权限 (Permissions)</strong> - 系统中被检查的具体访问权</li></ol><h2 id="内置角色" tabindex="-1"><a class="header-anchor" href="#内置角色"><span>内置角色</span></a></h2><p>Melody Auth 提供以下预定义角色：</p><ul><li><strong><code>super_admin</code></strong> - 拥有对所有系统功能的完全管理权限</li></ul><p>你可以通过管理面板或 REST API 创建其他自定义角色。</p><h2 id="角色管理" tabindex="-1"><a class="header-anchor" href="#角色管理"><span>角色管理</span></a></h2><h3 id="通过管理面板" tabindex="-1"><a class="header-anchor" href="#通过管理面板"><span>通过管理面板</span></a></h3><ol><li>进入管理面板的 Roles 部分</li><li>点击 “Create Role”</li><li>输入角色名称和可选的描述</li><li>保存角色</li></ol><h3 id="通过-s2s-rest-api" tabindex="-1"><a class="header-anchor" href="#通过-s2s-rest-api"><span>通过 S2S REST API</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">GET /api/v1/roles: 获取所有角色</span>
<span class="line">POST /api/v1/roles: 创建新角色</span>
<span class="line">GET /api/v1/roles/{roleId}: 获取指定角色</span>
<span class="line">PUT /api/v1/roles/{roleId}: 更新角色</span>
<span class="line">DELETE /api/v1/roles/{roleId}: 删除角色</span>
<span class="line">GET /api/v1/roles/{roleId}/users: 获取角色中的所有用户</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="token-中的角色信息" tabindex="-1"><a class="header-anchor" href="#token-中的角色信息"><span>Token 中的角色信息</span></a></h3><p>当用户进行认证时，他们的角色会包含在：</p><ol><li><strong>访问 Token (Access Tokens)</strong> - 用于 API 授权</li><li><strong>ID Token</strong> - 用于用户身份信息</li></ol><p>然后你可以通过 access token 和 id token 中的 <code>roles</code> 字段来检查用户的权限。</p>`,18)]))}const c=a(l,[["render",r]]),d=JSON.parse('{"path":"/zh/rbac.html","title":"基于角色的访问控制 (RBAC)","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1755304846000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":1,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"5396c9586a61f59593ebaea2b6848496a7027f19","time":1755304846000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add docs for main features (#428)"}]},"filePathRelative":"zh/rbac.md"}');export{c as comp,d as data};
