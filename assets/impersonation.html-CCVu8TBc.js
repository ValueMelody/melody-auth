import{_ as e,c as s,a,o as t}from"./app-Bs8I1UkO.js";const o={};function i(p,n){return t(),s("div",null,n[0]||(n[0]=[a(`<h1 id="impersonation" tabindex="-1"><a class="header-anchor" href="#impersonation"><span>Impersonation</span></a></h1><p>Allow privileged admins to act as another user in a specific SPA for support and troubleshooting.</p><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How it works</span></a></h2><ul><li>An admin with an allowed role triggers impersonation for a target user and SPA app.</li><li>The server issues a short-lived refresh_token for the target user, attributed to the impersonator.</li><li>The frontend uses this refresh_token to obtain access tokens for the target user session.</li></ul><p>Notes:</p><ul><li>Only SPA apps are eligible for impersonation.</li><li>If user consent is required for the app, the target user must have consented; otherwise the request is rejected.</li></ul><h2 id="server-side-role-setup" tabindex="-1"><a class="header-anchor" href="#server-side-role-setup"><span>Server-side role setup</span></a></h2><p>File: <code>server/src/configs/variable.ts</code></p><ul><li>Add any custom roles that can impersonate to <code>S2sConfig.impersonationRoles</code>.</li><li>Default is <code>[Role.SuperAdmin]</code>.</li></ul><p>Example:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> S2sConfig <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  impersonationRoles<span class="token operator">:</span> <span class="token punctuation">[</span>Role<span class="token punctuation">.</span>SuperAdmin<span class="token punctuation">,</span> Role<span class="token punctuation">.</span>SupportAdmin<span class="token punctuation">,</span> Role<span class="token punctuation">.</span>OrgAdmin<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redeploy or restart the auth server after changes.</p><h2 id="admin-panel-access-control-setup" tabindex="-1"><a class="header-anchor" href="#admin-panel-access-control-setup"><span>Admin Panel access control setup</span></a></h2><p>File: <code>admin-panel/tools/access.ts</code></p><p>To let a custom role use the impersonation feature in the Admin Panel:</p><ul><li>Add the role to <code>AllowedRoles</code>.</li><li>Add a <code>RoleAccesses[YourRole]</code> entry including <code>Access.Impersonation</code>. You will likely also want basic read permissions (e.g., <code>ReadUser</code>, <code>ReadApp</code>).</li></ul><p>Example:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code class="language-typescript"><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> AllowedRoles <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  typeTool<span class="token punctuation">.</span>Role<span class="token punctuation">.</span>SuperAdmin<span class="token punctuation">,</span></span>
<span class="line">  typeTool<span class="token punctuation">.</span>Role<span class="token punctuation">.</span>SupportAdmin<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> RoleAccesses <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span>typeTool<span class="token punctuation">.</span>Role<span class="token punctuation">.</span>SuperAdmin<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token comment">// ...existing accesses</span></span>
<span class="line">    Access<span class="token punctuation">.</span>Impersonation<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span>typeTool<span class="token punctuation">.</span>Role<span class="token punctuation">.</span>SupportAdmin<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    Access<span class="token punctuation">.</span>ReadUser<span class="token punctuation">,</span></span>
<span class="line">    Access<span class="token punctuation">.</span>ReadApp<span class="token punctuation">,</span></span>
<span class="line">    Access<span class="token punctuation">.</span>Impersonation<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ensure the admin account has the intended role assigned.</p><h2 id="using-the-admin-panel" tabindex="-1"><a class="header-anchor" href="#using-the-admin-panel"><span>Using the Admin Panel</span></a></h2><ul><li>Open a user’s detail page and choose Impersonate.</li><li>Select a SPA app. If consent is enforced and missing, you’ll be prompted to collect it first.</li><li>On success, you’ll receive a <code>refresh_token</code> and convenience links for each app redirect URI: <ul><li><code>https://your-app.example.com/callback?refresh_token=...&amp;refresh_token_expires_on=...&amp;refresh_token_expires_in=...</code></li></ul></li></ul><p>Clicking a link opens the app preloaded with the impersonation refresh token.<br><img src="https://raw.githubusercontent.com/ValueMelody/melody-auth/main/docs/images/impersonation.jpg" alt="Impersonation"></p><h2 id="frontend-handling-of-impersonation" tabindex="-1"><a class="header-anchor" href="#frontend-handling-of-impersonation"><span>Frontend handling of impersonation</span></a></h2><p>All Frontend SDKs automatically parse the <code>refresh_token</code> query parameters on load and store them.</p><h2 id="calling-the-s2s-api-directly" tabindex="-1"><a class="header-anchor" href="#calling-the-s2s-api-directly"><span>Calling the S2S API directly</span></a></h2><p>If you want to generate the impersonation refresh token yourself, you can call the S2S API directly.</p><p>Endpoint: <code>POST /api/v1/users/{authId}/impersonation/{appId}</code></p><ul><li>Authorization: Bearer S2S token with scope <code>root</code></li><li>Body: <code>{ &quot;impersonatorToken&quot;: &quot;&lt;admin-spa-access-token&gt;&quot; }</code></li><li>Response: <code>{ refresh_token, refresh_token_expires_in, refresh_token_expires_on }</code></li></ul><p>Sequence:</p><ol><li>Obtain an S2S access token via Client Credentials with scope <code>root</code>.</li><li>Use that token to call the endpoint above.</li><li>Provide the returned <code>refresh_token</code> to the target app (via redirect URL parameters).</li><li>The app can use the refresh token to get access tokens for the target user session.</li></ol><h2 id="security-notes" tabindex="-1"><a class="header-anchor" href="#security-notes"><span>Security notes</span></a></h2><ul><li>Impersonation should be restricted to trusted admin roles only.</li><li>Tokens are short-lived by design. The returned refresh token defaults to about 30 minutes validity.</li><li>Refresh tokens are tagged with <code>impersonatedBy</code> internally for traceability.</li></ul>`,32)]))}const c=e(o,[["render",i]]),r=JSON.parse('{"path":"/impersonation.html","title":"Impersonation","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754954867000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":1,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"8072502fc071765c4d8e2ab6e797919d78d7c086","time":1754954867000,"email":"byn9826@gmail.com","author":"Baozier","message":"Regroup docs (#420)"}]},"filePathRelative":"impersonation.md"}');export{c as comp,r as data};
