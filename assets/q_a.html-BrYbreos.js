import{_ as s,c as a,a as e,o as p}from"./app-BTCWvB3H.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h1><h2 id="如何验证-spa-访问令牌" tabindex="-1"><a class="header-anchor" href="#如何验证-spa-访问令牌"><span>如何验证 SPA 访问令牌</span></a></h2><p>在验证使用 <strong>RSA256</strong> 算法的 SPA 访问令牌时，你可以通过访问 <code>[你的 Auth Server 地址]/.well-known/jwks.json</code> 获取 <strong>JWKS (JSON Web Key Set)</strong> 来获得公钥。下面的示例展示了如何使用 <strong>jwks‑rsa</strong> 库来验证令牌：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> verify <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;jsonwebtoken&#39;</span></span>
<span class="line"><span class="token keyword">import</span> jwksClient <span class="token keyword">from</span> <span class="token string">&#39;jwks-rsa&#39;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// 初始化 JWKS 客户端，用于获取签名密钥</span></span>
<span class="line"><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token function">jwksClient</span><span class="token punctuation">(</span><span class="token punctuation">{</span> jwksUri<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NEXT_PUBLIC_SERVER_URI</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/.well-known/jwks.json</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 从 JWKS 端点检索签名密钥</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getKey</span> <span class="token operator">=</span> <span class="token punctuation">(</span>header<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">getSigningKey</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>kid<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> signingKey <span class="token operator">=</span> key<span class="token punctuation">.</span>publicKey <span class="token operator">||</span> key<span class="token punctuation">.</span>rsaPublicKey</span>
<span class="line">      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> signingKey<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 验证 JWT 的函数</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">verifyJwtToken</span> <span class="token operator">=</span> <span class="token punctuation">(</span>token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> getKey<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> decoded<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">resolve</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 从请求头中验证访问令牌</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">verifyAccessToken</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> headersList <span class="token operator">=</span> <span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> authHeader <span class="token operator">=</span> headersList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;authorization&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> accessToken <span class="token operator">=</span> authHeader<span class="token operator">?.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>accessToken<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> tokenBody <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">verifyJwtToken</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenBody<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何支持新的语言环境" tabindex="-1"><a class="header-anchor" href="#如何支持新的语言环境"><span>如何支持新的语言环境</span></a></h2><p>该项目默认支持 <strong>英语 (EN)</strong> 和 <strong>法语 (FR)</strong>。若要添加其他语言环境，请执行以下步骤：</p><ul><li>更新 <code>server/src/configs/locale.ts</code> 文件，并为新的语言环境提供翻译。</li><li>在 <strong>SUPPORTED_LOCALES</strong> 环境变量数组中加入新的语言代码。</li></ul><h2 id="如何轮换-jwt-密钥" tabindex="-1"><a class="header-anchor" href="#如何轮换-jwt-密钥"><span>如何轮换 JWT 密钥</span></a></h2><p>如需轮换 JWT 密钥，请执行以下步骤：</p><ol><li><p><strong>生成新的 JWT 密钥</strong><br> 根据你的运行环境执行密钥生成脚本。<br> 脚本执行完毕后，一对新的 JWT 密钥将立即生效；旧密钥会被标记为弃用——这意味着旧密钥将不再用于签名新的令牌，但仍可用于验证已签名的旧令牌。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> server</span>
<span class="line"><span class="token function">npm</span> run node:secret:generate <span class="token comment"># Node 环境</span></span>
<span class="line"><span class="token function">npm</span> run dev:secret:generate  <span class="token comment"># Cloudflare 本地环境</span></span>
<span class="line"><span class="token function">npm</span> run prod:secret:generate <span class="token comment"># Cloudflare 远程环境</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>清理旧密钥</strong><br> 当你希望停止验证由旧密钥签名的令牌时，运行清理脚本。脚本执行完毕后，旧密钥将被移除，所有由旧密钥签名的令牌将失效。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> server</span>
<span class="line"><span class="token function">npm</span> run node:secret:clean <span class="token comment"># Node 环境</span></span>
<span class="line"><span class="token function">npm</span> run dev:secret:clean  <span class="token comment"># Cloudflare 本地环境</span></span>
<span class="line"><span class="token function">npm</span> run prod:secret:clean <span class="token comment"># Cloudflare 远程环境</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="如何配置-mfa" tabindex="-1"><a class="header-anchor" href="#如何配置-mfa"><span>如何配置 MFA</span></a></h2><ul><li><strong>强制指定的 MFA 类型</strong>：将 <code>OTP_MFA_IS_REQUIRED</code>、<code>SMS_MFA_IS_REQUIRED</code> 或 <code>EMAIL_MFA_IS_REQUIRED</code> 设置为 <code>true</code>，即可在登录时强制要求对应的 MFA。</li><li><strong>让用户在多种 MFA 中任选其一</strong>：当 <code>OTP_MFA_IS_REQUIRED</code>、<code>SMS_MFA_IS_REQUIRED</code> 和 <code>EMAIL_MFA_IS_REQUIRED</code> 均为 <code>false</code> 时，可将 <code>ENFORCE_ONE_MFA_ENROLLMENT</code> 设置为要支持的 MFA 类型数组，用户必须在这些类型中至少注册一种。</li><li>你也可以通过 <strong>管理后台</strong> 或 <strong>S2S API</strong> 提供的 MFA 注册功能，自定义 MFA 注册流程。</li></ul><h2 id="如何触发不同的策略-policy" tabindex="-1"><a class="header-anchor" href="#如何触发不同的策略-policy"><span>如何触发不同的策略 (policy)</span></a></h2><ul><li>在将用户重定向到授权页面时，只需在查询字符串中添加 <code>policy=[policy]</code> 即可触发不同策略：<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">  <span class="token keyword">const</span> url <span class="token operator">=</span> serverUri <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;/oauth2/v1/authorize?&#39;</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;response_type=code&#39;</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;&amp;state=&#39;</span> <span class="token operator">+</span> state <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;&amp;client_id=&#39;</span> <span class="token operator">+</span> clientId <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;&amp;redirect_uri=&#39;</span> <span class="token operator">+</span> redirectUri <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;&amp;code_challenge=&#39;</span> <span class="token operator">+</span> codeChallenge <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;&amp;code_challenge_method=S256&#39;</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;&amp;policy=&#39;</span> <span class="token operator">+</span> policy <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;&amp;scope=&#39;</span> <span class="token operator">+</span> scope <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;&amp;locale=&#39;</span> <span class="token operator">+</span> locale</span>
<span class="line">  window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> url</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>在 <strong>React SDK</strong> 中，可通过 <code>loginRedirect</code> 并传入 <code>policy</code> 参数来触发：<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> loginRedirect <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">loginRedirect</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  policy<span class="token operator">:</span> <span class="token string">&#39;change_password&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>支持的策略</strong><ul><li><code>sign_in_or_sign_up</code>：默认策略</li><li><code>update_info</code>：允许用户更新信息</li><li><code>change_password</code>：允许用户修改密码（仅限密码登录用户）。需要将 <code>ENABLE_PASSWORD_RESET</code> 设置为 <code>true</code></li><li><code>change_email</code>：允许用户修改邮箱（仅限密码登录用户）。需要将 <code>ENABLE_EMAIL_VERIFICATION</code> 设置为 <code>true</code></li><li><code>reset_mfa</code>：允许用户重置已注册的 MFA</li><li><code>manage_passkey</code>：允许用户管理 Passkey。需要将 <code>ALLOW_PASSKEY_ENROLLMENT</code> 设置为 <code>true</code></li></ul></li></ul><h2 id="如何更改授权页的主题-品牌" tabindex="-1"><a class="header-anchor" href="#如何更改授权页的主题-品牌"><span>如何更改授权页的主题 / 品牌</span></a></h2><ul><li>通过修改 <code>server/src/configs/variable.ts</code> 中的 <code>DefaultBranding</code> 变量即可更改默认主题 / 品牌。</li><li>若想针对不同客户端使用不同的主题 / 品牌，请按以下步骤操作： <ol><li>在 <code>server/wrangler.toml</code> 中将 <code>ENABLE_ORG</code> 设置为 <code>true</code></li><li>在管理后台创建新的 <strong>组织 (org)</strong>，并设置唯一的 slug</li><li>在管理后台为该组织配置主题 / 品牌</li><li>在重定向到授权页面时，添加查询字符串 <code>org=[slug]</code></li></ol></li></ul><h2 id="如何让自定义角色拥有模拟登录-impersonation-权限" tabindex="-1"><a class="header-anchor" href="#如何让自定义角色拥有模拟登录-impersonation-权限"><span>如何让自定义角色拥有模拟登录 (impersonation) 权限</span></a></h2><p>默认仅 <code>super_admin</code> 角色能模拟登录其他账号。若要让自定义角色也能执行模拟登录：</p><ul><li>在 <code>server/src/configs/variable.ts</code> 中，将该角色添加到 <code>impersonationRoles</code> 数组（S2S API 权限）</li><li>在 <code>admin-panel/tools/access.ts</code> 中，将 <code>Access.Impersonation</code> 添加到该角色的 <code>allowedAccesses</code> 数组（管理后台权限）</li></ul>`,19)]))}const i=s(t,[["render",o]]),r=JSON.parse('{"path":"/zh/q_a.html","title":"常见问题","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1748744819000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":1,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"1f6a42a6b45fdfb25e862e4b91e0a9988ee80459","time":1748744819000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add docs in CN (#378)"}]},"filePathRelative":"zh/q&a.md"}');export{i as comp,r as data};
