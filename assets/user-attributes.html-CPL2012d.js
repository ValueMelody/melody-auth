import{_ as a,c as t,a as i,o as n}from"./app-BPesaNQn.js";const s={};function r(l,e){return n(),t("div",null,e[0]||(e[0]=[i(`<h1 id="user-attributes" tabindex="-1"><a class="header-anchor" href="#user-attributes"><span>User Attributes</span></a></h1><p>User attributes allow you to capture and manage custom data fields for users beyond the standard fields (email, etc.). This feature enables you to collect additional information during sign-up and include it in authentication tokens or user profile data.</p><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h2><p>User attributes provide a flexible way to:</p><ul><li>Collect custom information during user registration</li><li>Include custom data in ID tokens</li><li>Return custom data through the user info endpoint</li><li>Support multiple languages for attribute labels</li><li>Enforce required fields during sign-up</li></ul><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><h3 id="enabling-user-attributes" tabindex="-1"><a class="header-anchor" href="#enabling-user-attributes"><span>Enabling User Attributes</span></a></h3><p>To enable the user attributes feature, set the following configuration in your <code>server/wrangler.toml</code>:</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code class="language-toml"><span class="line"><span class="token punctuation">[</span><span class="token table class-name">vars</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">ENABLE_USER_ATTRIBUTE</span> <span class="token punctuation">=</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This configuration:</p><ul><li>Enables user attribute management in the admin panel</li><li>Allows user attributes to be included in sign-up forms</li><li>Enables S2S API endpoints for user attribute management</li></ul><h2 id="managing-user-attributes" tabindex="-1"><a class="header-anchor" href="#managing-user-attributes"><span>Managing User Attributes</span></a></h2><h3 id="admin-panel-interface" tabindex="-1"><a class="header-anchor" href="#admin-panel-interface"><span>Admin Panel Interface</span></a></h3><p>Once enabled, you can manage user attributes through the admin panel:</p><ol><li><strong>Navigate to User Attributes</strong>: Access the user attributes section in the admin panel</li><li><strong>Create New Attributes</strong>: Click &quot;Create&quot; to add a new user attribute</li><li><strong>Configure Properties</strong>: Set up the attribute with the following options: <ul><li><strong>Name</strong> (Required): Internal identifier for the attribute</li><li><strong>Locales</strong>: Multi-language display labels for the attribute</li><li><strong>Include in Sign Up Form</strong>: Whether this attribute appears during user registration</li><li><strong>Required in Sign Up Form</strong>: Whether users must provide this value during registration</li><li><strong>Include in ID Token Body</strong>: Whether this attribute is included in JWT ID token payload</li><li><strong>Include in User Info</strong>: Whether this attribute is returned by the user info endpoint</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/ValueMelody/melody-auth/main/docs/images/user_attributes.jpg" alt="User Attributes"></p><h3 id="s2s-api-management" tabindex="-1"><a class="header-anchor" href="#s2s-api-management"><span>S2S API Management</span></a></h3><p>User attributes can be managed programmatically through S2S API endpoints:</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http"><pre><code class="language-http"><span class="line">GET /api/v1/user-attributes: get all user attributes</span>
<span class="line">GET /api/v1/user-attributes/{id}: get a specific user attribute</span>
<span class="line">POST /api/v1/user-attributes: create a new user attribute</span>
<span class="line">PUT /api/v1/user-attributes/{id}: update an existing user attribute</span>
<span class="line">DELETE /api/v1/user-attributes/{id}: Delete a user attribute</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sign-up-form-integration" tabindex="-1"><a class="header-anchor" href="#sign-up-form-integration"><span>Sign-Up Form Integration</span></a></h2><p>When <code>includeInSignUpForm</code> is enabled, user attributes automatically appear in the sign-up form:</p><ul><li>Attributes are displayed as text input fields</li><li>Labels are localized based on the user&#39;s selected locale</li><li>Required attributes are marked and validated during form submission</li><li>Attributes are collected alongside standard sign-up data</li></ul><p>The appropriate label is displayed based on:</p><ul><li>The user&#39;s current locale selection</li><li>Falls back to the attribute <code>name</code> if no matching locale is found</li></ul><h2 id="id-token-integration" tabindex="-1"><a class="header-anchor" href="#id-token-integration"><span>ID Token Integration</span></a></h2><p>When <code>includeInIdTokenBody</code> is enabled:</p><ul><li>User attribute values are included in the JWT ID token payload</li><li>Attributes appear as key-value pairs using the attribute name as the key</li><li>Only attributes marked for ID token inclusion are added</li></ul><h2 id="user-info-endpoint" tabindex="-1"><a class="header-anchor" href="#user-info-endpoint"><span>User Info Endpoint</span></a></h2><p>When <code>includeInUserInfo</code> is enabled:</p><ul><li>User attributes are returned by the <code>/userinfo</code> endpoint</li><li>Attributes appear in the <code>attributes</code> object in the response</li><li>Only attributes marked for user info inclusion are returned</li></ul>`,30)]))}const u=a(s,[["render",r]]),d=JSON.parse('{"path":"/user-attributes.html","title":"User Attributes","lang":"en-US","frontmatter":{},"git":{"updatedTime":1755219196000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":1,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"48aef26b66375de4db0d1c4e18eeafe5a6ba159a","time":1755219196000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add docs for org groups, user attributes, and log management (#427)"}]},"filePathRelative":"user-attributes.md"}');export{u as comp,d as data};
