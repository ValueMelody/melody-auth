import{_ as a,c as s,a as e,o}from"./app-C6b_id82.js";const l={};function t(c,n){return o(),s("div",null,n[0]||(n[0]=[e(`<h1 id="品牌化" tabindex="-1"><a class="header-anchor" href="#品牌化"><span>品牌化</span></a></h1><p>自定义托管授权（身份）页面和邮件模板的外观和样式。</p><h2 id="可自定义内容" tabindex="-1"><a class="header-anchor" href="#可自定义内容"><span>可自定义内容</span></a></h2><ul><li>Logo 和邮件 logo：<code>COMPANY_LOGO_URL</code>、<code>COMPANY_EMAIL_LOGO_URL</code></li><li>字体：<code>fontFamily</code>、<code>fontUrl</code></li><li>颜色： <ul><li><code>layoutColor</code>、<code>labelColor</code></li><li><code>primaryButtonColor</code>、<code>primaryButtonLabelColor</code>、<code>primaryButtonBorderColor</code></li><li><code>secondaryButtonColor</code>、<code>secondaryButtonLabelColor</code>、<code>secondaryButtonBorderColor</code></li><li><code>criticalIndicatorColor</code></li></ul></li><li>页脚链接：<code>termsLink</code>、<code>privacyPolicyLink</code></li></ul><p>这些值会被身份页面布局和组件使用。例如，<code>layoutColor</code> 控制页面背景，<code>labelColor</code> 控制文字颜色，按钮颜色决定了主要/次要操作的样式。</p><h2 id="全局默认-所有客户端" tabindex="-1"><a class="header-anchor" href="#全局默认-所有客户端"><span>全局默认（所有客户端）</span></a></h2><p>有两个位置可以配置全局品牌化：</p><ol><li>在代码中编辑默认值</li></ol><ul><li>文件：<code>server/src/configs/variable.ts</code></li><li>更新 <code>DefaultBranding</code> 枚举的值，以设置字体和颜色的全局默认。</li></ul><ol start="2"><li>通过环境变量设置 logo 和法律链接</li></ol><ul><li>文件：<code>server/wrangler.toml</code> → <code>[vars]</code></li><li>设置： <ul><li><code>COMPANY_LOGO_URL</code></li><li><code>COMPANY_EMAIL_LOGO_URL</code></li><li><code>TERMS_LINK</code></li><li><code>PRIVACY_POLICY_LINK</code></li></ul></li></ul><p>更改后，重新部署或重启服务器。</p><h2 id="按组织定制品牌化" tabindex="-1"><a class="header-anchor" href="#按组织定制品牌化"><span>按组织定制品牌化</span></a></h2><p>为特定组织（tenants/clients）覆盖品牌化配置：</p><ol><li>启用组织功能</li></ol><ul><li>在 <code>server/wrangler.toml</code> 中的 <code>[vars]</code> 下，将 <code>ENABLE_ORG = true</code>。</li></ul><ol start="2"><li>创建组织并设置品牌化</li></ol><ul><li>打开 Admin Panel。</li><li>转到 <code>Orgs</code> 标签页。</li><li>创建一个具有唯一 slug 的新组织。</li><li>配置该组织的品牌化（logo、颜色、字体、链接）。</li></ul><ol start="3"><li>将用户路由到该组织的品牌页面</li></ol><ul><li>在授权重定向 URL 中将组织 slug 作为查询参数添加：<code>org=&lt;slug&gt;</code></li><li>示例：<code>https://your-auth-server/identity/v1/authorize?client_id=...&amp;redirect_uri=...&amp;response_type=code&amp;org=acme</code></li></ul><h3 id="前端-sdk-示例" tabindex="-1"><a class="header-anchor" href="#前端-sdk-示例"><span>前端 SDK 示例</span></a></h3><p>如果你使用的是前端 SDK，将 <code>org</code> 参数传递给 <code>loginRedirect</code>（或 <code>loginPopup</code>）：</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useAuth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@melody-auth/react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SignInButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> isAuthenticated<span class="token punctuation">,</span> loginRedirect <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">signInAcme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">loginRedirect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> org<span class="token operator">:</span> <span class="token string">&#39;acme&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAuthenticated<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>signInAcme<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Sign in to Acme</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果指定了组织（org）并且允许使用该组织进行公共注册，则你为该组织设置的值会覆盖身份页面和邮件中的全局默认值。</p>`,24)]))}const p=a(l,[["render",t]]),d=JSON.parse('{"path":"/zh/branding.html","title":"品牌化","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754954867000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":1,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"8072502fc071765c4d8e2ab6e797919d78d7c086","time":1754954867000,"email":"byn9826@gmail.com","author":"Baozier","message":"Regroup docs (#420)"}]},"filePathRelative":"zh/branding.md"}');export{p as comp,d as data};
