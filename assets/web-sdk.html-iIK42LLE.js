import{_ as s,c as n,a as t,o as a}from"./app-BMtGzWFk.js";const i={};function d(r,e){return a(),n("div",null,e[0]||(e[0]=[t(`<h1 id="web-sdk" tabindex="-1"><a class="header-anchor" href="#web-sdk"><span>Web SDK</span></a></h1><p>The Web SDK is a library that allows you to easily integrate Melody Auth into your web application that uses vanilla JavaScript.</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">npm install @melody-auth/web --save</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>The Web SDK functions accept a shared configuration object.</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th><th>Default</th><th>Required</th></tr></thead><tbody><tr><td>clientId</td><td>string</td><td>The auth clientId your frontend connects to</td><td>N/A</td><td>Yes</td></tr><tr><td>redirectUri</td><td>string</td><td>The URL to redirect users after successful authentication</td><td>N/A</td><td>Yes</td></tr><tr><td>serverUri</td><td>string</td><td>The URL where you host the melody auth server</td><td>N/A</td><td>Yes</td></tr><tr><td>scopes</td><td>string[]</td><td>Permission scopes to request for user access</td><td>N/A</td><td>No</td></tr><tr><td>storage</td><td>&#39;sessionStorage&#39; | &#39;localStorage&#39;</td><td>Storage type for authentication tokens</td><td>&#39;localStorage&#39;</td><td>No</td></tr></tbody></table><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">import {</span>
<span class="line">  triggerLogin,</span>
<span class="line">  loadCodeAndStateFromUrl,</span>
<span class="line">  exchangeTokenByAuthCode,</span>
<span class="line">  exchangeTokenByRefreshToken,</span>
<span class="line">  getUserInfo,</span>
<span class="line">  logout,</span>
<span class="line">} from &#39;@melody-auth/web&#39;</span>
<span class="line"></span>
<span class="line">const config = {</span>
<span class="line">  clientId: &#39;&lt;CLIENT_ID&gt;&#39;,</span>
<span class="line">  redirectUri: &#39;&lt;CLIENT_REDIRECT_URI&gt;&#39;,</span>
<span class="line">  serverUri: &#39;&lt;AUTH_SERVER_URI&gt;&#39;,</span>
<span class="line">  // Optional</span>
<span class="line">  scopes: [&#39;openid&#39;, &#39;profile&#39;],</span>
<span class="line">  storage: &#39;localStorage&#39;,</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loginredirect" tabindex="-1"><a class="header-anchor" href="#loginredirect"><span>loginRedirect</span></a></h2><p>Triggers a new authentication flow by redirecting to the auth server.</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th><th>Default</th><th>Required</th></tr></thead><tbody><tr><td>locale</td><td>string</td><td>Specifies the locale to use in the authentication flow</td><td>N/A</td><td>No</td></tr><tr><td>state</td><td>string</td><td>Specifies the state to use in the authentication flow if you prefer not to use a randomly generated string</td><td>N/A</td><td>No</td></tr><tr><td>policy</td><td>string</td><td>Specifies the policy to use in the authentication flow</td><td>&#39;sign_in_or_sign_up&#39;</td><td>No</td></tr><tr><td>org</td><td>string</td><td>Specifies the organization to use in the authentication flow, the value should be the slug of the organization</td><td>N/A</td><td>No</td></tr></tbody></table><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">await triggerLogin(&#39;redirect&#39;, config, {</span>
<span class="line">  locale: &#39;en&#39;,</span>
<span class="line">  // state: &#39;your-predictable-state&#39;,</span>
<span class="line">  // policy: &#39;sign_in_or_sign_up&#39;,</span>
<span class="line">  // org: &#39;your-org-slug&#39;,</span>
<span class="line">})</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loginpopup" tabindex="-1"><a class="header-anchor" href="#loginpopup"><span>loginPopup</span></a></h2><p>Triggers a new authentication flow in a popup window. When the user completes authentication, your <code>authorizePopupHandler</code> is invoked with <code>{ state, code }</code>. You must exchange the code for tokens.</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th><th>Default</th><th>Required</th></tr></thead><tbody><tr><td>locale</td><td>string</td><td>Specifies the locale to use in the authentication flow</td><td>N/A</td><td>No</td></tr><tr><td>state</td><td>string</td><td>Specifies the state to use in the authentication flow if you prefer not to use a randomly generated string</td><td>N/A</td><td>No</td></tr><tr><td>policy</td><td>string</td><td>Specifies the policy to use in the authentication flow</td><td>&#39;sign_in_or_sign_up&#39;</td><td>No</td></tr><tr><td>org</td><td>string</td><td>Specifies the organization to use in the authentication flow, the value should be the slug of the organization</td><td>N/A</td><td>No</td></tr><tr><td>authorizePopupHandler</td><td>(data: { state: string; code: string }) =&gt; void</td><td>Handler called when the popup posts back auth code</td><td>N/A</td><td>No</td></tr></tbody></table><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">await triggerLogin(&#39;popup&#39;, config, {</span>
<span class="line">  locale: &#39;en&#39;,</span>
<span class="line">  authorizePopupHandler: async ({ state, code }) =&gt; {</span>
<span class="line">    await exchangeTokenByAuthCode(code, state, config)</span>
<span class="line">    // tokens have now been processed (see notes below)</span>
<span class="line">  },</span>
<span class="line">})</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="handleredirectcallback" tabindex="-1"><a class="header-anchor" href="#handleredirectcallback"><span>handleRedirectCallback</span></a></h2><p>When the user returns from the auth server via redirect, read the <code>code</code> and <code>state</code> from the URL and exchange them for tokens.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">const { code, state } = loadCodeAndStateFromUrl()</span>
<span class="line">await exchangeTokenByAuthCode(code, state, config)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="what-gets-stored" tabindex="-1"><a class="header-anchor" href="#what-gets-stored"><span>What gets stored</span></a></h3><p>After a successful <code>exchangeTokenByAuthCode</code> call:</p><ul><li>The refresh token and id token are persisted using the configured storage under <code>StorageKey.RefreshToken</code> and <code>StorageKey.IdToken</code>.</li><li>The access token is returned from the exchange function but is not persisted. Use it immediately, or reacquire later via refresh token.</li></ul><h2 id="acquiretoken" tabindex="-1"><a class="header-anchor" href="#acquiretoken"><span>acquireToken</span></a></h2><p>Gets a fresh access token using the stored refresh token when needed.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">import { getStorage, StorageKey } from &#39;@melody-auth/shared&#39;</span>
<span class="line"></span>
<span class="line">const storage = getStorage(config.storage)</span>
<span class="line">const refreshTokenRaw = storage.getItem(StorageKey.RefreshToken)</span>
<span class="line">const refreshToken = refreshTokenRaw &amp;&amp; JSON.parse(refreshTokenRaw).refreshToken</span>
<span class="line"></span>
<span class="line">if (!refreshToken) throw new Error(&#39;No refresh token found&#39;)</span>
<span class="line"></span>
<span class="line">const { accessToken, expiresIn, expiresOn } = await exchangeTokenByRefreshToken(</span>
<span class="line">  config,</span>
<span class="line">  refreshToken,</span>
<span class="line">)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="acquireuserinfo" tabindex="-1"><a class="header-anchor" href="#acquireuserinfo"><span>acquireUserInfo</span></a></h2><p>Gets the user&#39;s public info from the auth server using a valid access token.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">const userInfo = await getUserInfo(config, { accessToken })</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="logoutredirect" tabindex="-1"><a class="header-anchor" href="#logoutredirect"><span>logoutRedirect</span></a></h2><p>Logs the user out. When <code>localOnly</code> is false and a refresh token is present, a remote logout request is sent first to obtain the post-logout redirect. Local tokens are cleared and the browser is redirected.</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>postLogoutRedirectUri</td><td>string</td><td>The URL to redirect users after logout</td></tr><tr><td>localOnly</td><td>boolean</td><td>If true, only clears local tokens and redirects without remote logout</td></tr></tbody></table><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">import { getStorage, StorageKey } from &#39;@melody-auth/shared&#39;</span>
<span class="line"></span>
<span class="line">const storage = getStorage(config.storage)</span>
<span class="line">const idTokenRaw = storage.getItem(StorageKey.IdToken)</span>
<span class="line">const refreshTokenRaw = storage.getItem(StorageKey.RefreshToken)</span>
<span class="line">const accessToken = /* obtain via exchangeTokenByRefreshToken(...) */</span>
<span class="line">const refreshToken = refreshTokenRaw &amp;&amp; JSON.parse(refreshTokenRaw).refreshToken</span>
<span class="line"></span>
<span class="line">await logout(</span>
<span class="line">  config,</span>
<span class="line">  accessToken ?? &#39;&#39;,</span>
<span class="line">  refreshToken ?? null,</span>
<span class="line">  &#39;http://localhost:3000/&#39;,</span>
<span class="line">  false, // set to true to skip remote logout</span>
<span class="line">)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="example-app" tabindex="-1"><a class="header-anchor" href="#example-app"><span>Example app</span></a></h2><p>See the minimal Vite example using the Web SDK: <code>https://github.com/ValueMelody/melody-auth-examples/tree/main/vite-web-example</code>.</p>`,34)]))}const o=s(i,[["render",d]]),c=JSON.parse('{"path":"/web-sdk.html","title":"Web SDK","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754789420000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":1,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"358b6a2c7b84b67228a8105b10393c204347c5b3","time":1754789420000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add docs for web-sdk (#419)"}]},"filePathRelative":"web-sdk.md"}');export{o as comp,c as data};
