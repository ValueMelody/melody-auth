import{_ as a,c as s,a as e,o}from"./app-C2vUhxwJ.js";const t={};function l(i,n){return o(),s("div",null,n[0]||(n[0]=[e(`<h1 id="branding" tabindex="-1"><a class="header-anchor" href="#branding"><span>Branding</span></a></h1><p>Customize the look and feel of the hosted authorization (identity) pages and email templates.</p><h2 id="what-you-can-customize" tabindex="-1"><a class="header-anchor" href="#what-you-can-customize"><span>What you can customize</span></a></h2><ul><li>Logo and email logo: <code>COMPANY_LOGO_URL</code>, <code>COMPANY_EMAIL_LOGO_URL</code></li><li>Font: <code>fontFamily</code>, <code>fontUrl</code></li><li>Colors: <ul><li><code>layoutColor</code>, <code>labelColor</code></li><li><code>primaryButtonColor</code>, <code>primaryButtonLabelColor</code>, <code>primaryButtonBorderColor</code></li><li><code>secondaryButtonColor</code>, <code>secondaryButtonLabelColor</code>, <code>secondaryButtonBorderColor</code></li><li><code>criticalIndicatorColor</code></li></ul></li><li>Footer links: <code>termsLink</code>, <code>privacyPolicyLink</code></li></ul><p>These values are consumed by the identity page layout and components. For example, <code>layoutColor</code> controls the page background, <code>labelColor</code> controls text color, and the button colors drive the primary/secondary action styles.</p><h2 id="global-defaults-all-clients" tabindex="-1"><a class="header-anchor" href="#global-defaults-all-clients"><span>Global defaults (all clients)</span></a></h2><p>There are two places to configure global branding:</p><ol><li>Edit defaults in code</li></ol><ul><li>File: <code>server/src/configs/variable.ts</code></li><li>Update the <code>DefaultBranding</code> enum values to set global defaults for fonts and colors.</li></ul><ol start="2"><li>Set logo and legal links via environment variables</li></ol><ul><li>File: <code>server/wrangler.toml</code> â†’ <code>[vars]</code></li><li>Set: <ul><li><code>COMPANY_LOGO_URL</code></li><li><code>COMPANY_EMAIL_LOGO_URL</code></li><li><code>TERMS_LINK</code></li><li><code>PRIVACY_POLICY_LINK</code></li></ul></li></ul><p>After changes, redeploy or restart the server.</p><h2 id="per-organization-branding" tabindex="-1"><a class="header-anchor" href="#per-organization-branding"><span>Per-organization branding</span></a></h2><p>Override branding for specific organizations (tenants/clients):</p><ol><li>Enable organizations</li></ol><ul><li>In <code>server/wrangler.toml</code>, set <code>ENABLE_ORG = true</code> under <code>[vars]</code>.</li></ul><ol start="2"><li>Create an org and set branding</li></ol><ul><li>Open the Admin Panel.</li><li>Go to the <code>Orgs</code> tab.</li><li>Create a new organization with a unique slug.</li><li>Configure the org&#39;s branding (logo, colors, fonts, links).</li></ul><ol start="3"><li>Route users to the org-branded pages</li></ol><ul><li>Add the organization slug to your authorization redirect URL as a query string: <code>org=&lt;slug&gt;</code></li><li>Example: <code>https://your-auth-server/identity/v1/authorize?client_id=...&amp;redirect_uri=...&amp;response_type=code&amp;org=acme</code></li></ul><h3 id="frontend-sdk-example" tabindex="-1"><a class="header-anchor" href="#frontend-sdk-example"><span>Frontend SDK example</span></a></h3><p>If you are using the Frontend SDK, pass the <code>org</code> parameter to <code>loginRedirect</code> (or <code>loginPopup</code>):</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code class="language-tsx"><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useAuth <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@melody-auth/react&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">SignInButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> isAuthenticated<span class="token punctuation">,</span> loginRedirect <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">signInAcme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">loginRedirect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> org<span class="token operator">:</span> <span class="token string">&#39;acme&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAuthenticated<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>signInAcme<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Sign in to Acme</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If an org is specified and public registration is allowed for it, the values you set for that org override the global defaults on the identity pages and emails.</p>`,24)]))}const p=a(t,[["render",l]]),r=JSON.parse('{"path":"/branding.html","title":"Branding","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754954867000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":1,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"8072502fc071765c4d8e2ab6e797919d78d7c086","time":1754954867000,"email":"byn9826@gmail.com","author":"Baozier","message":"Regroup docs (#420)"}]},"filePathRelative":"branding.md"}');export{p as comp,r as data};
