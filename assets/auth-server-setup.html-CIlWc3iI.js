import{_ as n,c as s,a,o as l}from"./app-DHIsNuWR.js";const i={};function r(d,e){return l(),s("div",null,e[0]||(e[0]=[a(`<h1 id="认证服务器设置" tabindex="-1"><a class="header-anchor" href="#认证服务器设置"><span>认证服务器设置</span></a></h1><p>本指南将指导你在 Cloudflare（远程/生产或本地/开发）和 Node.js 环境中部署 Melody Auth。</p><p>如果你使用 Windows，请通过 WSL 或 Docker 来配置环境。</p><h2 id="cloudflare-远程-生产环境" tabindex="-1"><a class="header-anchor" href="#cloudflare-远程-生产环境"><span>Cloudflare 远程/生产环境</span></a></h2><h3 id="_1-cloudflare-账户设置" tabindex="-1"><a class="header-anchor" href="#_1-cloudflare-账户设置"><span>1. Cloudflare 账户设置</span></a></h3><ol><li>如果尚未拥有 Cloudflare 账户，请先注册。</li></ol><h3 id="_2-创建-cloudflare-资源" tabindex="-1"><a class="header-anchor" href="#_2-创建-cloudflare-资源"><span>2. 创建 Cloudflare 资源</span></a></h3><p>在 Cloudflare 控制台：</p><ol><li>创建 Worker： <ul><li>进入 “Compute(Workers)” -&gt; “Workers &amp; Pages” -&gt; 点击 “Create” 按钮</li><li>将 Worker 命名为 <code>melody-auth</code></li><li>创建完成后，打开该 Worker -&gt; “Settings” -&gt; “Variables and Secrets”</li><li>新增变量 <code>AUTH_SERVER_URL</code>，值设为你的 Worker URL（如 <code>https://melody-auth.[your-account-name].workers.dev</code>）</li></ul></li><li>创建 D1 数据库： <ul><li>转到 “Storage &amp; Databases” -&gt; “D1 SQL Database”</li><li>点击 “Create” 按钮</li></ul></li><li>创建 KV 存储： <ul><li>转到 “Storage &amp; Databases” -&gt; “KV”</li><li>点击 “Create” 按钮</li></ul></li></ol><h3 id="_3-cloudflare-worker-secrets-设置" tabindex="-1"><a class="header-anchor" href="#_3-cloudflare-worker-secrets-设置"><span>3. Cloudflare Worker Secrets 设置</span></a></h3><p>在 Cloudflare 控制台：</p><ol><li>转到 “Compute(Workers)” -&gt; “Workers &amp; Pages”</li><li>选择你的 <code>melody-auth</code> Worker</li><li>点击 “Settings” -&gt; “Variables and Secrets”</li><li>为你打算使用的邮件、短信或社交登录服务提供商添加必要的环境变量。 <ul><li><a href="https://auth.valuemelody.com/zh/email-provider-setup.html" target="_blank" rel="noopener noreferrer">Email Provider Setup</a></li><li><a href="https://auth.valuemelody.com/zh/sms-provider-setup.html" target="_blank" rel="noopener noreferrer">SMS Provider Setup</a></li><li><a href="https://auth.valuemelody.com/zh/social-sign-in-provider-setup.html" target="_blank" rel="noopener noreferrer">Social Sign-In Provider Setup</a></li></ul></li><li>定义环境变量 <code>ENVIRONMENT</code>，并确保其值不为 <code>dev</code>。</li></ol><h3 id="_4-项目设置" tabindex="-1"><a class="header-anchor" href="#_4-项目设置"><span>4. 项目设置</span></a></h3><ol><li><p>克隆仓库并登录 Cloudflare：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">git clone git@github.com:ValueMelody/melody-auth.git</span>
<span class="line">cd melody-auth/server</span>
<span class="line">npm install</span>
<span class="line">npx wrangler login</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置 <code>server/wrangler.toml</code>：将 KV 和 D1 的 ID 替换为你刚创建的资源：</p><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">kv_namespaces</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">binding</span> <span class="token punctuation">=</span> <span class="token string">&quot;KV&quot;</span></span>
<span class="line"><span class="token key property">id</span> <span class="token punctuation">=</span> <span class="token string">&quot;your_kv_namespace_id&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">d1_databases</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">binding</span> <span class="token punctuation">=</span> <span class="token string">&quot;DB&quot;</span></span>
<span class="line"><span class="token key property">database_name</span> <span class="token punctuation">=</span> <span class="token string">&quot;melody-auth&quot;</span></span>
<span class="line"><span class="token key property">database_id</span> <span class="token punctuation">=</span> <span class="token string">&quot;your_d1_database_id&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_5-首次部署" tabindex="-1"><a class="header-anchor" href="#_5-首次部署"><span>5. 首次部署</span></a></h3><p>运行以下命令</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">cd server</span>
<span class="line">npm run prod:secret:generate</span>
<span class="line">npm run prod:migration:apply</span>
<span class="line">npm run prod:deploy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>现在一切准备就绪</strong>，你可以访问 <code>[your_worker_url]/.well-known/openid-configuration</code> 来验证部署是否成功。</p><h3 id="_6-后续部署" tabindex="-1"><a class="header-anchor" href="#_6-后续部署"><span>6. 后续部署</span></a></h3><p>拉取最新代码并重新部署：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">git pull origin main</span>
<span class="line">cd server</span>
<span class="line">npm run prod:migration:apply # 如果有新的数据库迁移</span>
<span class="line">npm run prod:deploy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cloudflare-本地-开发环境" tabindex="-1"><a class="header-anchor" href="#cloudflare-本地-开发环境"><span>Cloudflare 本地/开发环境</span></a></h2><p>若要搭建本地开发环境，请按照以下步骤：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">git clone git@github.com:ValueMelody/melody-auth.git</span>
<span class="line">cd melody-auth/server</span>
<span class="line">npm install</span>
<span class="line"></span>
<span class="line">cp .dev.vars.example .dev.vars</span>
<span class="line"># 为你打算使用的邮件、短信或社交登录服务提供商添加必要的环境变量。</span>
<span class="line"># 确保环境变量 &quot;ENVIRONMENT&quot; 在本地环境中设置为 &quot;dev&quot;。</span>
<span class="line"></span>
<span class="line">npm run dev:secret:generate</span>
<span class="line">npm run dev:migration:apply</span>
<span class="line">npm run dev:start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cloudflare-多远程环境" tabindex="-1"><a class="header-anchor" href="#cloudflare-多远程环境"><span>Cloudflare 多远程环境</span></a></h2><p>当你需要在 Cloudflare 上管理多个远程环境（如 dev、demo、QA、staging、production）时，可以按以下步骤操作：</p><ol><li>资源预配：<br> 在 Cloudflare 控制台为新环境创建 Worker、D1 和 KV 资源。</li><li>复制配置文件：<br> 复制现有 toml 文件（如 <code>server/wrangler.toml</code> 或 <code>server/demo.wrangler.toml</code>），并重命名为类似 <code>[envName].wrangler.toml</code>。</li><li>更新资源标识：<br> 编辑新的 <code>[envName].wrangler.toml</code> 文件，将资源名称、KV ID 和 D1 ID 替换为新环境对应的值。</li><li>生成 Secrets：<br> 使用新的配置文件运行生成密钥脚本：<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">node ./src/scripts/generate-secret.cjs prod [envName].wrangler.toml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>应用 D1 迁移：<br> 针对新环境的 D1 资源执行迁移命令：<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">wrangler d1 migrations apply [d1 name for your new environment] --remote --config [envName].wrangler.toml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>部署 Worker：<br> 使用新环境名称构建并部署 Worker：<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">npm run build &amp;&amp; wrangler deploy --minify src/index.tsx --config [envName].wrangler.toml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="node-环境设置" tabindex="-1"><a class="header-anchor" href="#node-环境设置"><span>Node 环境设置</span></a></h2><h3 id="_1-node、postgresql-与-redis-设置" tabindex="-1"><a class="header-anchor" href="#_1-node、postgresql-与-redis-设置"><span>1. Node、PostgreSQL 与 Redis 设置</span></a></h3><p>首先搭建 PostgreSQL 与 Redis 服务器，并准备好连接字符串。同时请确保你使用的 <b>Node.js 版本在 20.05 或更高</b>，以保证兼容性。</p><h3 id="_2-项目设置" tabindex="-1"><a class="header-anchor" href="#_2-项目设置"><span>2. 项目设置</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">git clone git@github.com:ValueMelody/melody-auth.git</span>
<span class="line">cd melody-auth/server</span>
<span class="line">npm install</span>
<span class="line"></span>
<span class="line">cp .dev.vars.example .dev.vars</span>
<span class="line"># 填写 PostgreSQL 与 Redis 连接字符串</span>
<span class="line"># 为你打算使用的邮件、短信或社交登录服务提供商添加必要的环境变量。</span>
<span class="line"># 确保环境变量 &quot;ENVIRONMENT&quot; 在本地环境中设置为 &quot;dev&quot;。</span>
<span class="line"></span>
<span class="line">npm run node:secret:generate</span>
<span class="line">npm run node:saml:secret:generate</span>
<span class="line">npm run node:migration:apply</span>
<span class="line">npm run node:dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将在 Node.js 环境下以开发模式启动服务器，并连接到本地或远程数据库。</p><h3 id="_3-生产构建" tabindex="-1"><a class="header-anchor" href="#_3-生产构建"><span>3. 生产构建</span></a></h3><p>在生产环境下进行构建与运行：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line"># 确保环境变量 &quot;ENVIRONMENT&quot; 在生产构建时设置为非 &quot;dev&quot; 值。</span>
<span class="line">cd server</span>
<span class="line">npm run node:build</span>
<span class="line">npm run node:start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-后续部署" tabindex="-1"><a class="header-anchor" href="#_4-后续部署"><span>4. 后续部署</span></a></h3><p>拉取最新代码并重新部署：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">git pull origin main</span>
<span class="line">cd server</span>
<span class="line">npm run node:migration:apply # 如果有新的数据库迁移</span>
<span class="line">npm run node:build</span>
<span class="line">npm run node:start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node-开发环境-docker" tabindex="-1"><a class="header-anchor" href="#node-开发环境-docker"><span>Node 开发环境（Docker）</span></a></h2><ul><li>在 <code>server/.dev.vars</code> 中设置所需的环境变量</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">cd server</span>
<span class="line"></span>
<span class="line">cp .dev.vars.example .dev.vars</span>
<span class="line"># 为 Docker 启用 PostgreSQL 与 Redis 连接字符串</span>
<span class="line">PG_CONNECTION_STRING=postgres://admin:admin@postgres:5432/melody-auth</span>
<span class="line">REDIS_CONNECTION_STRING=redis://redis:6379</span>
<span class="line"></span>
<span class="line"># 为你打算使用的邮件、短信或社交登录服务提供商添加必要的环境变量。</span>
<span class="line"># 确保环境变量 &quot;ENVIRONMENT&quot; 在本地环境中设置为 &quot;dev&quot;。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行 docker compose</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">cd devops/docker</span>
<span class="line">docker-compose up --build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,44)]))}const p=n(i,[["render",r]]),c=JSON.parse('{"path":"/zh/auth-server-setup.html","title":"认证服务器设置","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754702584000,"contributors":[{"name":"Baozier","username":"Baozier","email":"byn9826@gmail.com","commits":3,"url":"https://github.com/Baozier"}],"changelog":[{"hash":"e8160a845120c944f26f39fd6b2828da9bb2ee19","time":1754702584000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add doc for app banner feature (#417)"},{"hash":"ed35295e8eba4ff0642166cf025380b9a9631a87","time":1752450868000,"email":"byn9826@gmail.com","author":"Baozier","message":"Move docker to devops folder (#405)","tag":"v1.3.4"},{"hash":"1f6a42a6b45fdfb25e862e4b91e0a9988ee80459","time":1748744819000,"email":"byn9826@gmail.com","author":"Baozier","message":"Add docs in CN (#378)"}]},"filePathRelative":"zh/auth-server-setup.md"}');export{p as comp,c as data};
